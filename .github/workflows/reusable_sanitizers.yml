# Check code with compilers' sanitizers
name: Sanitizers

on: workflow_call

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTL_DIR : "${{github.workspace}}/../install-dir"

permissions:
  contents: read

jobs:
  ubuntu-build:
    name: Ubuntu
    strategy:
      matrix:
        compiler: [{c: gcc, cxx: g++}, {c: clang, cxx: clang++}, {c: icx, cxx: icpx}]
        # TSAN is mutually exclusive with other sanitizers
        sanitizers: [{asan: ON, ubsan: ON, tsan: OFF}, {asan: OFF, ubsan: OFF, tsan: ON}]
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Install apt packages
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake libhwloc-dev libnuma-dev libtbb-dev

    - name: Install oneAPI basekit
      if: matrix.compiler.cxx == 'icpx'
      run: |
        sudo apt-get install -y gpg-agent wget
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install -y intel-oneapi-ippcp-devel intel-oneapi-ipp-devel intel-oneapi-common-oneapi-vars intel-oneapi-compiler-dpcpp-cpp

    - name: Configure build
      run: >
        ${{ matrix.compiler.cxx == 'icpx' && '. /opt/intel/oneapi/setvars.sh &&' || ''}} 
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=Debug
        -DUMF_BUILD_SHARED_LIBRARY=OFF
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON
        -DUMF_BUILD_CUDA_PROVIDER=ON
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_USE_ASAN=${{matrix.sanitizers.asan}}
        -DUMF_USE_UBSAN=${{matrix.sanitizers.ubsan}}
        -DUMF_USE_TSAN=${{matrix.sanitizers.tsan}}
        -DUMF_BUILD_EXAMPLES=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON

    - name: Build UMF
      run: |
        ${{ matrix.compiler.cxx == 'icpx' && '. /opt/intel/oneapi/setvars.sh' || true }}
        cmake --build ${{env.BUILD_DIR}} -j $(nproc)

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      env:
        ASAN_OPTIONS: allocator_may_return_null=1
        TSAN_OPTIONS: allocator_may_return_null=1
      run: |
        ctest --output-on-failure

  windows-build:
    name: cl and clang-cl on Windows
    env:
      VCPKG_PATH: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows"
    strategy:
      matrix:
        compiler: [{c: cl, cxx: cl}, {c: clang-cl, cxx: clang-cl}]
        # Only ASAN is supported
        sanitizers: [{asan: ON}]
    runs-on: windows-2022

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    # Use the latest MSVC toolset available, when compiling UMF with ASan.
    # Running binaries compiled with older toolsets results in a
    # 'STATUS_DLL_INIT_FAILED' error despite being linked with ASan from
    # the same toolset as the compiler being used.
    # https://github.com/actions/runner-images/issues/8891
    - name: Setup MSVC dev command prompt
      if: matrix.sanitizers.asan == 'ON'
      uses: TheMrMilchmann/setup-msvc-dev@48edcef51a12c80d7e62ace57aae1417795e511c # v3.0.0
      with:
        arch: x64
        toolset: '14'

    - name: Initialize vcpkg
      uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
      with:
        vcpkgGitCommitId: 3dd44b931481d7a8e9ba412621fa810232b66289
        vcpkgDirectory: ${{env.BUILD_DIR}}/vcpkg
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Install dependencies
      run: vcpkg install
      shell: pwsh # Specifies PowerShell as the shell for running the script.

    # TODO enable level zero provider
    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}"
        -DUMF_BUILD_SHARED_LIBRARY=OFF
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_USE_ASAN=${{matrix.sanitizers.asan}}
        -DUMF_BUILD_EXAMPLES=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=OFF
        -DUMF_BUILD_CUDA_PROVIDER=OFF
        -DUMF_TESTS_FAIL_ON_SKIP=ON

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config Debug -j $Env:NUMBER_OF_PROCESSORS

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      env:
        ASAN_OPTIONS: allocator_may_return_null=1
        TSAN_OPTIONS: allocator_may_return_null=1
      run: ctest -C Debug --output-on-failure

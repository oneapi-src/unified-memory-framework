# This workflow builds and tests providers using GPU memory. It requires 
# appropriately labelled self-hosted runners installed on systems with the 
# correct GPU and drivers

name: GPU

on: [workflow_call]

permissions:
  contents: read

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTL_DIR : "${{github.workspace}}/../install-dir"
  COVERAGE_DIR : "${{github.workspace}}/coverage"

jobs:
  gpu-Level-Zero:
    name: Level-Zero
    env:
      VCPKG_PATH: "${{github.workspace}}/../../../../vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/../../../../vcpkg/packages/tbb_x64-windows;${{github.workspace}}/../../../../vcpkg/packages/jemalloc_x64-windows"
      COVERAGE_NAME : "exports-coverage-gpu"
    # run only on upstream; forks will not have the HW
    if: github.repository == 'oneapi-src/unified-memory-framework'
    strategy:
      matrix:
        shared_library: ['ON', 'OFF']
        os: ['Ubuntu', 'Windows']
        build_type: ['Debug', 'Release']
        include:
          - os: 'Ubuntu'
            compiler: {c: gcc, cxx: g++}
            number_of_processors: '$(nproc)'
          - os: 'Windows'
            compiler: {c: cl, cxx: cl}
            number_of_processors: '$Env:NUMBER_OF_PROCESSORS'
        exclude:
          - os: 'Windows'
            build_type: 'Debug'

    runs-on: ["DSS-LEVEL_ZERO", "DSS-${{matrix.os}}"]
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Get information about platform
        if: matrix.os == 'Ubuntu'
        run: .github/scripts/get_system_info.sh

      - name: Configure build for Win
        if: matrix.os == 'Windows'
        run: >
          cmake
          -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}"
          -B ${{env.BUILD_DIR}}
          -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
          -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
          -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
          -DUMF_BUILD_BENCHMARKS=ON
          -DUMF_BUILD_TESTS=ON
          -DUMF_BUILD_GPU_TESTS=ON
          -DUMF_BUILD_GPU_EXAMPLES=ON
          -DUMF_FORMAT_CODE_STYLE=OFF
          -DUMF_DEVELOPER_MODE=ON
          -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
          -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
          -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON
          -DUMF_BUILD_CUDA_PROVIDER=OFF
          -DUMF_TESTS_FAIL_ON_SKIP=ON
      
      - name: Configure build for Ubuntu
        if: matrix.os == 'Ubuntu'
        run: >
          cmake
          -B ${{env.BUILD_DIR}}
          -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
          -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
          -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
          -DUMF_BUILD_BENCHMARKS=ON
          -DUMF_BUILD_TESTS=ON
          -DUMF_BUILD_GPU_TESTS=ON
          -DUMF_BUILD_GPU_EXAMPLES=ON
          -DUMF_FORMAT_CODE_STYLE=OFF
          -DUMF_DEVELOPER_MODE=ON
          -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
          -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
          -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON
          -DUMF_BUILD_CUDA_PROVIDER=OFF
          -DUMF_TESTS_FAIL_ON_SKIP=ON
          ${{ matrix.build_type == 'Debug' && '-DUMF_USE_COVERAGE=ON' || '' }}

      - name: Build UMF
        run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j ${{matrix.number_of_processors}}

      - name: Run tests
        working-directory: ${{env.BUILD_DIR}}
        run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

      - name: Run examples
        working-directory: ${{env.BUILD_DIR}}
        run: ctest --output-on-failure --test-dir examples -C ${{matrix.build_type}}

  gpu-CUDA:
    name: CUDA
    env:
      COVERAGE_NAME : "exports-coverage-gpu-CUDA"
    # run only on upstream; forks will not have the HW
    if: github.repository == 'oneapi-src/unified-memory-framework'
    strategy:
      matrix:
        shared_library: ['ON', 'OFF']
        build_type: ['Debug', 'Release']
        # TODO add windows
        os: ['Ubuntu']
        include:
        - os: 'Ubuntu'
          compiler: {c: gcc, cxx: g++}
          number_of_processors: '$(nproc)'

    runs-on: ["DSS-CUDA", "DSS-${{matrix.os}}"]
    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Get information about platform
      if: matrix.os == 'Ubuntu'
      run: .github/scripts/get_system_info.sh

    - name: Configure build for Ubuntu
      if: matrix.os == 'Ubuntu'
      run: >
        cmake -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DUMF_BUILD_BENCHMARKS=ON
        -DUMF_BUILD_TESTS=ON
        -DUMF_BUILD_GPU_TESTS=ON
        -DUMF_BUILD_GPU_EXAMPLES=ON
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=OFF
        -DUMF_BUILD_CUDA_PROVIDER=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        ${{ matrix.build_type == 'Debug' && '-DUMF_USE_COVERAGE=ON' || '' }}

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j ${{matrix.number_of_processors}}

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

    - name: Run examples
      working-directory: ${{env.BUILD_DIR}}
      run: ctest --output-on-failure --test-dir examples -C ${{matrix.build_type}}

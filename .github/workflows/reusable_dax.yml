#
# This workflow builds and tests the DEVDAX memory provider
# and the file memory provider with FSDAX.
# It requires:
# - a DAX device (e.g. /dev/dax0.0) and
# - a FSDAX device (e.g. /dev/pmem1)
# configured and mounted in the OS.
#
# The DAX device should be specified using the
# UMF_TESTS_DEVDAX_PATH and UMF_TESTS_DEVDAX_SIZE environment variables.
#
# The FSDAX device should be mounted in the OS (e.g. /mnt/pmem1)
# and the UMF_TESTS_FSDAX_PATH environment variable
# should contain a path to a file on this FSDAX device.
#

name: Dax

on: [workflow_call]

permissions:
  contents: read

env:
  DEVDAX_NAMESPACE : "0.0"
  FSDAX_NAMESPACE : "1.0"
  FSDAX_PMEM: "pmem1"
  UMF_TESTS_FSDAX_PATH: "/mnt/pmem1/file"
  UMF_TESTS_FSDAX_PATH_2: "/mnt/pmem1/file_2"
  BUILD_DIR : "${{github.workspace}}/build"
  INSTL_DIR : "${{github.workspace}}/../install-dir"
  COVERAGE_DIR : "${{github.workspace}}/coverage"
  COVERAGE_NAME : "exports-coverage-dax"
  DAX_TESTS: "./test/test_provider_file_memory ./test/test_provider_devdax_memory"

jobs:
  dax:
    name: Build
    # run only on upstream; forks may not have a DAX device
    if: github.repository == 'oneapi-src/unified-memory-framework'
    strategy:
      matrix:
        build_type: [Debug, Release]
        shared_library: ['ON', 'OFF']

    runs-on: ["DSS-DEVDAX", "DSS-Ubuntu"]
    steps:
      - name: Check configuration of the DEVDAX
        run: |
          echo DEVDAX_NAMESPACE="${{env.DEVDAX_NAMESPACE}}"
          ndctl list --namespace=namespace${{env.DEVDAX_NAMESPACE}} --device-dax
          ls -al /dev/dax${{env.DEVDAX_NAMESPACE}}
          echo UMF_TESTS_DEVDAX_PATH="/dev/dax${{env.DEVDAX_NAMESPACE}}"
          echo UMF_TESTS_DEVDAX_SIZE="$(ndctl list --namespace=namespace${{env.DEVDAX_NAMESPACE}} | grep size | cut -d':' -f2 | cut -d',' -f1)"

      - name: Check configuration of the FSDAX
        run: |
          echo FSDAX_NAMESPACE="${{env.FSDAX_NAMESPACE}}"
          echo UMF_TESTS_FSDAX_PATH="${{env.UMF_TESTS_FSDAX_PATH}}"
          echo UMF_TESTS_FSDAX_PATH_2="${{env.UMF_TESTS_FSDAX_PATH_2}}"
          ndctl list --namespace=namespace${{env.FSDAX_NAMESPACE}}
          ls -al /dev/${{env.FSDAX_PMEM}} /mnt/${{env.FSDAX_PMEM}}
          mount | grep -e "/dev/${{env.FSDAX_PMEM}}"
          touch ${{env.UMF_TESTS_FSDAX_PATH}} ${{env.UMF_TESTS_FSDAX_PATH_2}}
          rm -f ${{env.UMF_TESTS_FSDAX_PATH}} ${{env.UMF_TESTS_FSDAX_PATH_2}}

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Configure build
        run: >
          cmake
          -B ${{env.BUILD_DIR}}
          -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_CXX_COMPILER=g++
          -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
          -DUMF_BUILD_BENCHMARKS=OFF
          -DUMF_BUILD_TESTS=ON
          -DUMF_BUILD_GPU_TESTS=OFF
          -DUMF_BUILD_GPU_EXAMPLES=OFF
          -DUMF_FORMAT_CODE_STYLE=OFF
          -DUMF_DEVELOPER_MODE=ON
          -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
          -DUMF_BUILD_LEVEL_ZERO_PROVIDER=OFF
          -DUMF_TESTS_FAIL_ON_SKIP=ON
          ${{ matrix.build_type == 'Debug' && '-DUMF_USE_COVERAGE=ON' || '' }}

      - name: Build UMF
        run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $(nproc)

      - name: Run the DEVDAX tests
        working-directory: ${{env.BUILD_DIR}}
        run: >
          UMF_TESTS_DEVDAX_PATH="/dev/dax${{env.DEVDAX_NAMESPACE}}"
          UMF_TESTS_DEVDAX_SIZE="$(ndctl list --namespace=namespace${{env.DEVDAX_NAMESPACE}} | grep size | cut -d':' -f2 | cut -d',' -f1)"
          ctest -C ${{matrix.build_type}} -V -R devdax

      - name: Run the FSDAX tests
        working-directory: ${{env.BUILD_DIR}}
        run: >
          UMF_TESTS_FSDAX_PATH=${{env.UMF_TESTS_FSDAX_PATH}}
          UMF_TESTS_FSDAX_PATH_2=${{env.UMF_TESTS_FSDAX_PATH_2}}
          ctest -C ${{matrix.build_type}} -V -R "file|fsdax"

      - name: Run the DEVDAX tests with the proxy library
        # proxy library is built only if libumf is a shared library
        if: ${{ matrix.shared_library == 'ON' }}
        working-directory: ${{env.BUILD_DIR}}
        run: >
          LD_PRELOAD=./lib/libumf_proxy.so
          UMF_TESTS_DEVDAX_PATH="/dev/dax${{env.DEVDAX_NAMESPACE}}"
          UMF_TESTS_DEVDAX_SIZE="$(ndctl list --namespace=namespace${{env.DEVDAX_NAMESPACE}} | grep size | cut -d':' -f2 | cut -d',' -f1)"
          ctest -C ${{matrix.build_type}} -V -R devdax

      - name: Run the FSDAX tests with the proxy library
        # proxy library is built only if libumf is a shared library
        if: ${{ matrix.shared_library == 'ON' }}
        working-directory: ${{env.BUILD_DIR}}
        run: >
          LD_PRELOAD=./lib/libumf_proxy.so
          UMF_TESTS_FSDAX_PATH=${{env.UMF_TESTS_FSDAX_PATH}}
          UMF_TESTS_FSDAX_PATH_2=${{env.UMF_TESTS_FSDAX_PATH_2}}
          ctest -C ${{matrix.build_type}} -V -R "file|fsdax"

      - name: Run DAX tests under valgrind
        run: |
          ${{github.workspace}}/test/test_valgrind.sh ${{github.workspace}} ${{env.BUILD_DIR}} memcheck "${{env.DAX_TESTS}}"
          ${{github.workspace}}/test/test_valgrind.sh ${{github.workspace}} ${{env.BUILD_DIR}} drd "${{env.DAX_TESTS}}"
          ${{github.workspace}}/test/test_valgrind.sh ${{github.workspace}} ${{env.BUILD_DIR}} helgrind "${{env.DAX_TESTS}}"

      - name: Check coverage
        if:  ${{ matrix.build_type == 'Debug' }}
        working-directory: ${{env.BUILD_DIR}}
        run: |
          export COVERAGE_FILE_NAME=${{env.COVERAGE_NAME}}-shared-${{matrix.shared_library}}
          echo "COVERAGE_FILE_NAME: $COVERAGE_FILE_NAME"
          ../scripts/coverage/coverage_capture.sh $COVERAGE_FILE_NAME
          mkdir -p ${{env.COVERAGE_DIR}}
          mv ./$COVERAGE_FILE_NAME ${{env.COVERAGE_DIR}}

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if:  ${{ matrix.build_type == 'Debug' }}
        with:
          name: ${{env.COVERAGE_NAME}}-shared-${{matrix.shared_library}}
          path: ${{env.COVERAGE_DIR}}

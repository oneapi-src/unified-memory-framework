# Various non-standard tests, requiring e.g. longer run
name: Nightly

# This job is run at 04:00 UTC every day or on demand.
on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'

permissions:
  contents: read
  pull-requests: read

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTALL_DIR: "${{github.workspace}}/build/install"

jobs:
  Fuzzing:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        compiler: [{c: clang, cxx: clang++}]
    name: Fuzzing (ubuntu-latest, build_type=${{matrix.build_type}}, compilers=${{matrix.compiler.c}}/${{matrix.compiler.cxx}})
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Install apt packages
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake hwloc libhwloc-dev libnuma-dev libtbb-dev

    - name: Find Clang fuzzer lib
      run: |
        CLANG_LIBS_DIR=$(find /usr/lib -name "libclang_rt.fuzzer_no_main-x86_64.a" -exec dirname {} \; | head -n 1)
        echo "CLANG_LIBS_DIR=${CLANG_LIBS_DIR}" >> $GITHUB_ENV

    - name: Configure CMake
      run: >
        cmake
        -B ${{github.workspace}}/build
        -DCMAKE_PREFIX_PATH=${{env.CLANG_LIBS_DIR}}
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_SHARED_LIBRARY=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_FUZZTESTS=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --verbose -j$(nproc)

    - name: Run regular tests
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{matrix.build_type}} --output-on-failure -E "fuzz"

    - name: Run regular tests with proxy library
      working-directory: ${{env.BUILD_DIR}}
      run: LD_PRELOAD=./lib/libumf_proxy.so ctest -C ${{matrix.build_type}} --output-on-failure -E "fuzz"

    - name: Fuzz long test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{matrix.build_type}} --output-on-failure --verbose -L "fuzz-long"

  Valgrind:
    strategy:
      fail-fast: false
      matrix:
          tool: ['memcheck', 'drd', 'helgrind']
    name: Valgrind (${{matrix.tool}})
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Install apt packages
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake hwloc libhwloc-dev libnuma-dev libtbb-dev valgrind

    - name: Configure CMake
      run: >
        cmake
        -B ${{github.workspace}}/build
        -DCMAKE_BUILD_TYPE=Debug
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=OFF
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=OFF
        -DUMF_BUILD_CUDA_PROVIDER=OFF
        -DUMF_USE_VALGRIND=1
        -DUMF_TESTS_FAIL_ON_SKIP=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Debug -j$(nproc)

    - name: Run tests under valgrind
      run: ${{github.workspace}}/test/test_valgrind.sh ${{github.workspace}} ${{github.workspace}}/build ${{matrix.tool}}

  # Build and test UMF with different CMake generators on Windows
  Windows-generators:
    env:
      VCPKG_PATH: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows"
      VCPKG_PATH_NO_HWLOC: "${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows"
    strategy:
      matrix:
        build_type: [Debug, Release]
        compiler: [{c: cl, cxx: cl}]
        shared_library: ['ON', 'OFF']
        static_hwloc: ['ON', 'OFF']
        generator: ['Ninja', 'NMake Makefiles']
        umfd_lib: ['ON', 'OFF']
    name: Windows (generator=${{matrix.generator}}, compilers=${{matrix.compiler.c}}/${{matrix.compiler.cxx}}, build_type=${{matrix.build_type}}, shared_library=${{matrix.shared_library}}, static_hwloc=${{matrix.static_hwloc}}, umfd_lib=${{matrix.umfd_lib}})

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Restore vcpkg cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      id: cache
      with:
        path: vcpkg_pkgs_cache.zip
        key: vcpkg-generators-windows-latest-${{ hashFiles('vcpkg.json') }}

    - name: Unpack vcpkg cache
      if: steps.cache.outputs.cache-hit == 'true'
      run: |
        Expand-Archive -Path ${{github.workspace}}/vcpkg_pkgs_cache.zip -DestinationPath ${{env.BUILD_DIR}}/vcpkg -Force

    - name: Initialize vcpkg
      if: steps.cache.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
      with:
        vcpkgGitCommitId: ea2a964f9303270322cf3f2d51c265ba146c422d # 1.04.2025
        vcpkgDirectory: ${{env.BUILD_DIR}}/vcpkg
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: vcpkg install --triplet x64-windows

    - name: Set VCPKG_PATH without hwloc
      if: matrix.static_hwloc == 'ON'
      run: echo "VCPKG_PATH=${{env.VCPKG_PATH_NO_HWLOC}}" >> $env:GITHUB_ENV

    - name: Install Ninja
      if: matrix.generator == 'Ninja'
      uses: seanmiddleditch/gha-setup-ninja@3b1f8f94a2f8254bd26914c4ab9474d4f0015f67 # v6

    - name: Configure MSVC environment
      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}"
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -G "${{matrix.generator}}"
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DUMF_LINK_HWLOC_STATICALLY=${{matrix.static_hwloc}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON
        -DUMF_BUILD_CUDA_PROVIDER=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        ${{ matrix.umfd_lib == 'ON' && '-DUMF_USE_DEBUG_POSTFIX=ON' || '' }}

    - name: Build UMF
      shell: cmd
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j %NUMBER_OF_PROCESSORS%

    - name: Run tests
      shell: cmd
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

    - name: Get UMF version
      run: |
        $version = (git describe --tags --abbrev=0 | Select-String -Pattern '\d+\.\d+\.\d+').Matches.Value
        echo "UMF_VERSION=$version" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Test UMF installation and uninstallation
      # The '--shared-library' parameter is added to the installation test when the UMF is built as a shared library
      # The '--umfd-lib' parameter is added when the UMF is built with the umfd library
      run: >
        python3 ${{github.workspace}}/test/test_installation.py
        --build-dir ${{env.BUILD_DIR}}
        --install-dir ${{env.INSTALL_DIR}}
        --build-type ${{matrix.build_type}}
        --umf-version ${{env.UMF_VERSION}}
        ${{ matrix.shared_library == 'ON' && '--proxy --shared-library' || '' }}
        ${{ matrix.umfd_lib == 'ON' && '--umfd-lib' || ''}}
        ${{ matrix.static_hwloc == 'ON' && '--hwloc' || '' }}

    - name: Configure the fetch_content example
      if: matrix.static_hwloc == 'OFF'
      working-directory: ${{github.workspace}}/examples/fetch_content
      # Fetch_Content the UMF code from the current repository (-DUMF_REPO="${{github.workspace}}")
      run: >
        cmake
        -B build
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}"
        -DUMF_REPO="${{github.workspace}}"
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -G "${{matrix.generator}}"

    - name: Build the fetch_content example
      if: matrix.static_hwloc == 'OFF'
      working-directory: ${{github.workspace}}/examples/fetch_content
      run: cmake --build build --config ${{matrix.build_type}} -j $env:NUMBER_OF_PROCESSORS

    - name: Run the fetch_content example
      if: matrix.static_hwloc == 'OFF'
      working-directory: ${{github.workspace}}/examples/fetch_content/build
      run: ctest -V

    - name: Prepare vcpkg cache
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        Compress-Archive -Path ${{env.BUILD_DIR}}/vcpkg/packages -DestinationPath ${{github.workspace}}/vcpkg_pkgs_cache.zip -Force -CompressionLevel Fastest

    - name: Save vcpkg cache
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{github.workspace}}/vcpkg_pkgs_cache.zip
        key: ${{ steps.cache.outputs.cache-primary-key }}

  # Build and test UMF with Intel C++ Compiler (ICX) on Windows
  Windows-icx:
   env:
     VCPKG_PATH: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows"
   strategy:
     matrix:
       os: ['windows-2022', 'windows-2025']
       build_type: [Debug]
       compiler: [{c: icx, cxx: icx}]
       shared_library: ['ON', 'OFF']
       include:
         - os: windows-2022
           build_type: Release
           compiler: {c: icx, cxx: icx}
           shared_library: 'ON'
   name: ICX (${{matrix.os}}, build_type=${{matrix.build_type}}, compilers=${{matrix.compiler.c}}/${{matrix.compiler.cxx}}, shared_library=${{matrix.shared_library}})
   runs-on: ${{matrix.os}}

   steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Restore vcpkg cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      id: cache
      with:
        path: vcpkg_pkgs_cache.zip
        key: vcpkg-icx-${{matrix.os}}-${{ hashFiles('vcpkg.json') }}

    - name: Unpack vcpkg cache
      if: steps.cache.outputs.cache-hit == 'true'
      run: |
        Expand-Archive -Path ${{github.workspace}}/vcpkg_pkgs_cache.zip -DestinationPath ${{env.BUILD_DIR}}/vcpkg -Force

    - name: Initialize vcpkg
      if: steps.cache.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
      with:
        vcpkgGitCommitId: ea2a964f9303270322cf3f2d51c265ba146c422d # 1.04.2025
        vcpkgDirectory: ${{env.BUILD_DIR}}/vcpkg
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: vcpkg install --triplet x64-windows

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@3b1f8f94a2f8254bd26914c4ab9474d4f0015f67 # v6

    - name: Download icx compiler
      env:
        # Link source: https://www.intel.com/content/www/us/en/developer/tools/oneapi/dpc-compiler-download.html
        CMPLR_LINK: "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/15a35578-2f9a-4f39-804b-3906e0a5f8fc/w_dpcpp-cpp-compiler_p_2024.2.1.83_offline.exe"
      run: |
        Invoke-WebRequest -Uri "${{ env.CMPLR_LINK }}" -OutFile compiler_install.exe

    - name: Install icx compiler
      shell: cmd
      run: |
        start /b /wait .\compiler_install.exe -s -x -f extracted --log extract.log
        extracted\bootstrapper.exe -s --action install --eula=accept -p=NEED_VS2017_INTEGRATION=0 ^
          -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=.

    - name: Configure build
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
        call "C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat"
        cmake ^
          -B ${{env.BUILD_DIR}} ^
          -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}" ^
          -DCMAKE_C_COMPILER=${{matrix.compiler.c}} ^
          -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}} ^
          -G Ninja ^
          -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}} ^
          -DUMF_FORMAT_CODE_STYLE=OFF ^
          -DUMF_DEVELOPER_MODE=ON ^
          -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON ^
          -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON ^
          -DUMF_BUILD_CUDA_PROVIDER=ON ^
          -DUMF_TESTS_FAIL_ON_SKIP=ON

    - name: Build UMF
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
        call "C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat"
        cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j %NUMBER_OF_PROCESSORS%

    - name: Run tests
      shell: cmd
      working-directory: ${{env.BUILD_DIR}}
      run: |
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
        call "C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat"
        ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

    - name: Prepare vcpkg cache
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        Compress-Archive -Path ${{env.BUILD_DIR}}/vcpkg/packages -DestinationPath ${{github.workspace}}/vcpkg_pkgs_cache.zip -Force -CompressionLevel Fastest

    - name: Save vcpkg cache
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{github.workspace}}/vcpkg_pkgs_cache.zip
        key: ${{ steps.cache.outputs.cache-primary-key }}

  # Scenarios where UMF_LINK_HWLOC_STATICALLY is set to OFF and hwloc is not installed in the system
  # The hwloc library is fetched implicitly
  Hwloc-fallback:
    strategy:
      matrix:
        include:
          - os: 'ubuntu-latest'
            build_type: Release
            number_of_processors: '$(nproc)'
          - os: 'windows-latest'
            build_type: Release
            number_of_processors: '$Env:NUMBER_OF_PROCESSORS'
    name: "Fallback to static hwloc build (${{matrix.os}}), build_type=${{matrix.build_type}})"
    runs-on: ${{matrix.os}}

    steps:
    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y libnuma-dev

    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUMF_BUILD_SHARED_LIBRARY=ON
        -DUMF_BUILD_EXAMPLES=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_LINK_HWLOC_STATICALLY=OFF
        -DUMF_TESTS_FAIL_ON_SKIP=ON

    - name: Build UMF
      run: >
        cmake
        --build ${{env.BUILD_DIR}}
        --config ${{matrix.build_type}}
        -j ${{matrix.number_of_processors}}

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

  Windows-dynamic_mingw_hwloc:
    env:
      HWLOC_PACKAGE_NAME: hwloc-win64-build-2.10.0
      TBB_PACKAGE_NAME: oneapi-tbb-2021.12.0
      TBB_LIB_DIR: lib\intel64\vc14
      TBB_BIN_DIR: redist\intel64\vc14

    name: "Windows dynamic UMF + mingw libhwloc"
    strategy:
      matrix:
        build_type: [Release]

    runs-on: 'windows-latest'

    steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Get hwloc from official repo (mingw version)
      run: |
        Invoke-WebRequest -Uri https://download.open-mpi.org/release/hwloc/v2.10/${{env.HWLOC_PACKAGE_NAME}}.zip -OutFile ${{github.workspace}}\${{env.HWLOC_PACKAGE_NAME}}.zip -TimeoutSec 360
        Expand-Archive ${{github.workspace}}\${{env.HWLOC_PACKAGE_NAME}}.zip -DestinationPath ${{github.workspace}}

    - name: Get TBB from github
      run: |
        Invoke-WebRequest -Uri https://github.com/oneapi-src/oneTBB/releases/download/v2021.12.0/${{env.TBB_PACKAGE_NAME}}-win.zip -OutFile "${{github.workspace}}\${{env.TBB_PACKAGE_NAME}}-win.zip" -TimeoutSec 360
        Expand-Archive "${{github.workspace}}\${{env.TBB_PACKAGE_NAME}}-win.zip" -DestinationPath ${{github.workspace}}

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_PREFIX_PATH="${{github.workspace}}\${{env.HWLOC_PACKAGE_NAME}};${{github.workspace}}\${{env.TBB_PACKAGE_NAME}};${{github.workspace}}\${{env.TBB_PACKAGE_NAME}}\${{env.TBB_LIB_DIR}};${{github.workspace}}\${{env.TBB_PACKAGE_NAME}}\${{env.TBB_BIN_DIR}}"
        -DUMF_BUILD_SHARED_LIBRARY=ON
        -DUMF_BUILD_EXAMPLES=ON
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -DUMF_HWLOC_NAME=libhwloc

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

  L0:
    uses: ./.github/workflows/reusable_gpu.yml
    with:
      provider: "LEVEL_ZERO"
      runner: "L0"
  L0-BMG:
    uses: ./.github/workflows/reusable_gpu.yml
    with:
      provider: "LEVEL_ZERO"
      runner: "L0-BMG"
  CUDA:
    uses: ./.github/workflows/reusable_gpu.yml
    with:
      provider: "CUDA"
      runner: "CUDA"

  # Full execution of QEMU tests
  QEMU:
    uses: ./.github/workflows/reusable_qemu.yml
    with:
      short_run: false
      # Beside the 2 LTS Ubuntu, we also test this on the latest Ubuntu -  to be updated
      # every 6 months, so we verify the latest version of packages (compilers, etc.).
      os: "['ubuntu-22.04', 'ubuntu-24.04', 'ubuntu-25.04']"

  Benchmarks:
    uses: ./.github/workflows/reusable_benchmarks.yml
    permissions:
      contents: write
      pull-requests: write
    with:
      pr_no: '0'
      bench_script_params: >
        --save Baseline_PVC
        --filter umf-benchmark

  # Run benchmarks with the latest SYCL (with the latest UMF copied into the SYCL)
  # to verify the compatibility.
  #
  # TODO: re-enable this job, when nightly sycl builds are again available;
  #   the last one available (as of 24.07.2025) is not working properly with
  #   compute benchmarks. Now, we could only build sycl from sources, or find a
  #   matching version of compute benchmarks with last nightly package.
  Benchmarks-sycl:
    if: false
    uses: ./.github/workflows/reusable_benchmarks.yml
    permissions:
      contents: write
      pull-requests: write
    with:
      pr_no: '0'
      bench_script_params: >-
        --adapter level_zero_v2
        --compute-runtime
        --build-igc
        --preset Minimal
        --exit-on-failure
      runner: 'L0_PERF_ARC'
      compatibility: '1'

  SYCL:
    uses: ./.github/workflows/reusable_sycl.yml

  alpine:
    name: Alpine
    env:
      HOST_WORKDIR: ${{github.workspace}}
      WORKDIR: /unified-memory-framework
    strategy:
      matrix:
          build_type: [Debug, Release]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Build Alpine image
      run: |
        docker build . -f .github/docker/alpine-3.21.Dockerfile -t umf-alpine-3.21

    - name: Run UMF build on Alpine image
      run: |
        docker run --rm -i -v $HOST_WORKDIR:$WORKDIR \
        umf-alpine-3.21 $WORKDIR/.github/scripts/alpine_build.sh ${{matrix.build_type}} $WORKDIR

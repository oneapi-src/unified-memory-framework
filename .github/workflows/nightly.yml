# Various non-standard tests, requiring e.g. longer run
name: Nightly

# This job is run at 04:00 UTC every day or on demand.
on:
  push:
    branches-ignore:
      - 'dependabot/**'
  pull_request:

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTALL_DIR: "${{github.workspace}}/build/install"

jobs:
  icx:
   name: ICX
   env:
     VCPKG_PATH: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows"
   strategy:
     matrix:
       os: ['windows-2022']
       build_type: [Debug]
       compiler: [{c: icx, cxx: icx}]
       shared_library: ['ON', 'OFF']
       include:
         - os: windows-2022
           build_type: Release
           compiler: {c: icx, cxx: icx}
           shared_library: 'ON'
  
   runs-on: ${{matrix.os}}
  
   steps:
   - name: Checkout
     uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
     with:
       fetch-depth: 0
  
   - name: Initialize vcpkg
     uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
     with:
       vcpkgGitCommitId: ea2a964f9303270322cf3f2d51c265ba146c422d # 1.04.2025
       vcpkgDirectory: ${{env.BUILD_DIR}}/vcpkg
       vcpkgJsonGlob: '**/vcpkg.json'
  
   - name: Install dependencies
     run: vcpkg install --triplet x64-windows

   - name: Download and install win64devkit
     shell: cmd
     run: |
       curl -L https://github.com/skeeto/w64devkit/releases/download/v2.2.0/w64devkit-x64-2.2.0.7z.exe --output w64devkit.zip
       Expand-Archive w64devkit.zip -DestinationPath .

   - name: Add w64devkit to PATH
     run: |
       echo "$(Get-Location)\w64devkit\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
     
  
   - name: Install Ninja
     uses: seanmiddleditch/gha-setup-ninja@3b1f8f94a2f8254bd26914c4ab9474d4f0015f67 # v6
  
   - name: Download icx compiler
     env:
       # Link source: https://www.intel.com/content/www/us/en/developer/tools/oneapi/dpc-compiler-download.html
       CMPLR_LINK: "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/15a35578-2f9a-4f39-804b-3906e0a5f8fc/w_dpcpp-cpp-compiler_p_2024.2.1.83_offline.exe"
     run: |
       Invoke-WebRequest -Uri "${{ env.CMPLR_LINK }}" -OutFile compiler_install.exe
  
   - name: Install icx compiler
     shell: cmd
     run: |
       start /b /wait .\compiler_install.exe -s -x -f extracted --log extract.log
       extracted\bootstrapper.exe -s --action install --eula=accept -p=NEED_VS2017_INTEGRATION=0 ^
         -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=.
  
   - name: Configure build
     shell: cmd
     run: |
       call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
       call "C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat"
       cmake ^
         -B ${{env.BUILD_DIR}} ^
         -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}" ^
         -DCMAKE_C_COMPILER=${{matrix.compiler.c}} ^
         -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}} ^
         -G "Unix Makefiles" ^
         -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}} ^
         -DUMF_FORMAT_CODE_STYLE=OFF ^
         -DUMF_DEVELOPER_MODE=ON ^
         -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON ^
         -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON ^
         -DUMF_BUILD_CUDA_PROVIDER=ON ^
         -DUMF_TESTS_FAIL_ON_SKIP=ON
  
   - name: Build UMF
     shell: cmd
     run: |
       call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
       call "C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat"
       cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j %NUMBER_OF_PROCESSORS%
  
   - name: Run tests
     shell: cmd
     working-directory: ${{env.BUILD_DIR}}
     run: |
       call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
       call "C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat"
       ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test


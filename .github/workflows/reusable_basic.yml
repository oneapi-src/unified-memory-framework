# Builds project (with various compilers, CMake options, etc.) and runs tests
name: BasicBuilds

on: workflow_call

permissions:
  contents: read
  packages: read

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTL_DIR : "${{github.workspace}}/../install-dir"
  COVERAGE_DIR : "${{github.workspace}}/coverage"
  COVERAGE_NAME : "exports-coverage-basic"

jobs:
  ubuntu-build:
    name: Ubuntu
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
      options: --user root --privileged
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
    strategy:
      matrix:
        image: ['ghcr.io/rbanka1/umf-ubuntu-20.04:latest', 'ghcr.io/rbanka1/umf-ubuntu-22.04:latest' ]
        build_type: [Debug, Release]
        compiler: [{c: gcc, cxx: g++}]
        shared_library: ['OFF']
        level_zero_provider: ['ON']
        cuda_provider: ['ON']
        install_tbb: ['ON']
        disable_hwloc: ['OFF']
        link_hwloc_statically: ['OFF']
        include:
          - image: ghcr.io/rbanka1/umf-ubuntu-20.04:latest
            build_type: Release
            compiler: {c: gcc-7, cxx: g++-7}
            shared_library: 'OFF'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            install_tbb: 'ON'
            disable_hwloc: 'OFF'
            link_hwloc_statically: 'OFF'
          - image: ghcr.io/rbanka1/umf-ubuntu-22.04:latest
            build_type: Release
            compiler: {c: clang, cxx: clang++}
            shared_library: 'OFF'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            install_tbb: 'ON'
            disable_hwloc: 'OFF'
            link_hwloc_statically: 'OFF'
          - image: ghcr.io/rbanka1/umf-ubuntu-22.04:latest
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            install_tbb: 'ON'
            disable_hwloc: 'OFF'
            link_hwloc_statically: 'OFF'
          - image: ghcr.io/rbanka1/umf-ubuntu-24.04:latest
            build_type: Debug
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            install_tbb: 'ON'
            disable_hwloc: 'OFF'
            link_hwloc_statically: 'OFF'
          # test level_zero_provider='OFF' and cuda_provider='OFF'
          - image: ghcr.io/rbanka1/umf-ubuntu-22.04:latest
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'OFF'
            level_zero_provider: 'OFF'
            cuda_provider: 'OFF'
            install_tbb: 'ON'
            disable_hwloc: 'OFF'
            link_hwloc_statically: 'OFF'
          # test icx compiler
          - image: ghcr.io/rbanka1/umf-ubuntu-22.04:latest
            build_type: Release
            compiler: {c: icx, cxx: icpx}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            install_tbb: 'ON'
            disable_hwloc: 'OFF'
            link_hwloc_statically: 'OFF'
          # test without installing TBB
          - image: ghcr.io/rbanka1/umf-ubuntu-22.04:latest
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            install_tbb: 'OFF'
            disable_hwloc: 'OFF'
            link_hwloc_statically: 'OFF'
          - image: ghcr.io/rbanka1/umf-ubuntu-22.04:latest
            build_type: Debug
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            install_tbb: 'ON'
            disable_hwloc: 'ON'
            link_hwloc_statically: 'OFF'
          - image: ghcr.io/rbanka1/umf-ubuntu-22.04:latest
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            install_tbb: 'ON'
            disable_hwloc: 'OFF'
            link_hwloc_statically: 'ON'
    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Install oneAPI basekit
      if: matrix.compiler.cxx == 'icpx'
      run: |
        sudo apt-get update
        sudo apt-get install -y gpg-agent wget
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install -y intel-oneapi-ippcp-devel intel-oneapi-ipp-devel intel-oneapi-common-oneapi-vars intel-oneapi-compiler-dpcpp-cpp
  
    - name: Install libhwloc
      run: .github/scripts/install_hwloc.sh

    - name: Configure build
      run: >
        ${{ matrix.compiler.cxx == 'icpx' && '. /opt/intel/oneapi/setvars.sh &&' || ''}} 
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=${{matrix.level_zero_provider}}
        -DUMF_BUILD_CUDA_PROVIDER=${{matrix.cuda_provider}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -DUMF_DISABLE_HWLOC=${{matrix.disable_hwloc}}
        -DUMF_LINK_HWLOC_STATICALLY=${{matrix.link_hwloc_statically}}
        ${{ matrix.build_type == 'Debug' && matrix.compiler.c == 'gcc' && '-DUMF_USE_COVERAGE=ON' || '' }}

    - name: Build UMF
      run: |
        ${{ matrix.compiler.cxx == 'icpx' && '. /opt/intel/oneapi/setvars.sh' || true }}
        cmake --build ${{env.BUILD_DIR}} -j $(nproc)

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: |
        ${{ matrix.compiler.cxx == 'icpx' && '. /opt/intel/oneapi/setvars.sh' || true }}
        LD_LIBRARY_PATH="${{env.BUILD_DIR}}/lib/:${LD_LIBRARY_PATH}" ctest --output-on-failure

    - name: Set os name
      run: echo "ARTIFACT_NAME=${{ matrix.image }}" | sed -e 's|ghcr.io/rbanka1/||' -e 's|:|-|' >> $GITHUB_ENV

    - name: Check os coverage
      if:  ${{ matrix.build_type == 'Debug' && matrix.compiler.c == 'gcc' }}
      working-directory: ${{env.BUILD_DIR}}
      run: |
        export COVERAGE_FILE_NAME=${{env.COVERAGE_NAME}}-${{env.ARTIFACT_NAME}}-shared-${{matrix.shared_library}}-no_hwloc-${{matrix.disable_hwloc}}
        echo "COVERAGE_FILE_NAME: $COVERAGE_FILE_NAME"
        ../scripts/coverage/coverage_capture.sh $COVERAGE_FILE_NAME
        mkdir -p ${{env.COVERAGE_DIR}}
        mv ./$COVERAGE_FILE_NAME ${{env.COVERAGE_DIR}}

    - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      if:  ${{ matrix.build_type == 'Debug' && matrix.compiler.c == 'gcc' }}
      with:
        name: ${{env.COVERAGE_NAME}}-${{env.ARTIFACT_NAME}}-shared-${{matrix.shared_library}}-no_hwloc-${{matrix.disable_hwloc}}
        path: ${{env.COVERAGE_DIR}}

    - name: Remove the installation directory
      run: rm -rf ${{env.INSTL_DIR}}

    # - name: Test UMF installation and uninstallation
    #   # The '--shared-library' parameter is added to the installation test when the UMF is built as a shared library
    #   run: >
    #     python3 ${{github.workspace}}/test/test_installation.py
    #     --build-dir ${{env.BUILD_DIR}}
    #     --install-dir ${{env.INSTL_DIR}}
    #     --build-type ${{matrix.build_type}}
    #     ${{ matrix.install_tbb == 'ON' && matrix.disable_hwloc != 'ON' && matrix.shared_library == 'ON' && '--proxy' || '' }}
    #     --umf-version ${{env.UMF_VERSION}}
    #     ${{ matrix.shared_library == 'ON' && '--shared-library' || '' }}

  windows-build:
    name: Windows
    env:
      VCPKG_PATH: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows"
    strategy:
      matrix:
        os: ['windows-2019', 'windows-2022']
        build_type: [Debug, Release]
        compiler: [{c: cl, cxx: cl}]
        shared_library: ['ON', 'OFF']
        level_zero_provider: ['ON']
        cuda_provider: ['ON']
        include:
          - os: 'windows-2019'
            # clang build fails on Windows 2022
            build_type: Release
            compiler: {c: clang-cl, cxx: clang-cl}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            toolset: "-T ClangCL"
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            shared_library: 'ON'
            level_zero_provider: 'OFF'
            cuda_provider: 'OFF'

    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Initialize vcpkg
      uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
      with:
        vcpkgGitCommitId: 3dd44b931481d7a8e9ba412621fa810232b66289
        vcpkgDirectory: ${{env.BUILD_DIR}}/vcpkg
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Install dependencies
      run: vcpkg install
      shell: pwsh # Specifies PowerShell as the shell for running the script.

    - name: Get UMF version
      run: |
        $version = (git describe --tags --abbrev=0 | Select-String -Pattern '\d+\.\d+\.\d+').Matches.Value
        echo "UMF_VERSION=$version" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        ${{matrix.toolset}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}"
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=${{matrix.level_zero_provider}}
        -DUMF_BUILD_CUDA_PROVIDER=${{matrix.cuda_provider}}
        -DUMF_TESTS_FAIL_ON_SKIP=ON

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

    - name: Test UMF installation and uninstallation
      # The '--shared-library' parameter is added to the installation test when the UMF is built as a shared library
      run: >
        python3 ${{github.workspace}}/test/test_installation.py
        --build-dir ${{env.BUILD_DIR}}
        --install-dir ${{env.INSTL_DIR}}
        --build-type ${{matrix.build_type}}
        ${{matrix.shared_library == 'ON' && '--proxy' || '' }}
        --umf-version ${{env.UMF_VERSION}}
        ${{ matrix.shared_library == 'ON' && '--shared-library' || ''}}
        
    - name: check /DEPENDENTLOADFLAG in umf.dll
      if: ${{matrix.shared_library == 'ON' && matrix.compiler.cxx == 'cl'}}
      run: ${{github.workspace}}/.github/scripts/check_dll_flags.ps1 ${{env.BUILD_DIR}}/bin/${{matrix.build_type}}/umf.dll
      shell: pwsh

    - name: check /DEPENDENTLOADFLAG in umf_proxy.dll
      if: ${{matrix.shared_library == 'ON' && matrix.compiler.cxx == 'cl'}}
      run: ${{github.workspace}}/.github/scripts/check_dll_flags.ps1 ${{env.BUILD_DIR}}/src/proxy_lib/${{matrix.build_type}}/umf_proxy.dll
      shell: pwsh

  windows-dynamic_build_hwloc:
    name: "Windows dynamic UMF + static hwloc"
    strategy:
      matrix:
        build_type: [Release]

    runs-on: 'windows-2022'

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DUMF_BUILD_SHARED_LIBRARY=ON
        -DUMF_BUILD_EXAMPLES=ON
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=OFF
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON
        -DUMF_BUILD_CUDA_PROVIDER=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -DUMF_LINK_HWLOC_STATICALLY=ON

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

      # we check umf.dll only here - note that the proxy library is disabled in
      # this configuration
    - name: check /DEPENDENTLOADFLAG in umf.dll
      run: ${{github.workspace}}/.github/scripts/check_dll_flags.ps1 ${{env.BUILD_DIR}}/bin/${{matrix.build_type}}/umf.dll
      shell: pwsh

  windows-static_build_hwloc:
    name: "Windows static UMF + static hwloc"
    strategy:
      matrix:
        build_type: [Release]

    runs-on: 'windows-2022'

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DUMF_BUILD_SHARED_LIBRARY=OFF
        -DUMF_BUILD_EXAMPLES=ON
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=OFF
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON
        -DUMF_BUILD_CUDA_PROVIDER=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -DUMF_LINK_HWLOC_STATICALLY=ON

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS -v

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

  windows-dynamic_mingw_hwloc:
    env:
      HWLOC_PACKAGE_NAME: hwloc-win64-build-2.10.0
      TBB_PACKAGE_NAME: oneapi-tbb-2021.12.0
      TBB_LIB_DIR: lib\intel64\vc14
      TBB_BIN_DIR: redist\intel64\vc14

    name: "Windows dynamic UMF + mingw libhwloc"
    strategy:
      matrix:
        build_type: [Release]

    runs-on: 'windows-2022'

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Get hwloc from official repo (mingw version)
      run: |
        Invoke-WebRequest -Uri https://download.open-mpi.org/release/hwloc/v2.10/${{env.HWLOC_PACKAGE_NAME}}.zip -OutFile ${{github.workspace}}\${{env.HWLOC_PACKAGE_NAME}}.zip -TimeoutSec 360
        Expand-Archive ${{github.workspace}}\${{env.HWLOC_PACKAGE_NAME}}.zip -DestinationPath ${{github.workspace}}

    - name: Get TBB from github
      run: |
        Invoke-WebRequest -Uri https://github.com/oneapi-src/oneTBB/releases/download/v2021.12.0/${{env.TBB_PACKAGE_NAME}}-win.zip -OutFile "${{github.workspace}}\${{env.TBB_PACKAGE_NAME}}-win.zip" -TimeoutSec 360
        Expand-Archive "${{github.workspace}}\${{env.TBB_PACKAGE_NAME}}-win.zip" -DestinationPath ${{github.workspace}}

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_PREFIX_PATH="${{github.workspace}}\${{env.HWLOC_PACKAGE_NAME}};${{github.workspace}}\${{env.TBB_PACKAGE_NAME}};${{github.workspace}}\${{env.TBB_PACKAGE_NAME}}\${{env.TBB_LIB_DIR}};${{github.workspace}}\${{env.TBB_PACKAGE_NAME}}\${{env.TBB_BIN_DIR}}"
        -DUMF_BUILD_SHARED_LIBRARY=ON
        -DUMF_BUILD_EXAMPLES=ON
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -DUMF_HWLOC_NAME=libhwloc

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test

  macos-build:
    name: MacOS
    strategy:
      matrix:
        os: ['macos-13', 'macos-14']
        include:
          - os: macos-14
            static_hwloc: '-DUMF_LINK_HWLOC_STATICALLY=ON'
    env:
      BUILD_TYPE : "Release"
    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    # Latest distros do not allow global pip installation
    - name: Install Python requirements in venv
      run: |
        python3 -m venv .venv
        . .venv/bin/activate
        echo "$PATH" >> $GITHUB_PATH
        python3 -m pip install -r third_party/requirements.txt

    - name: Install dependencies
      run: brew install jemalloc tbb automake libtool

    - name: Install hwloc
      if: ${{ !matrix.static_hwloc }}
      run: brew install hwloc

    - name: Get UMF version
      run: |
        VERSION=$(git describe --tags --abbrev=0 | grep -Eo '\d+\.\d+\.\d+')
        echo "UMF_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=OFF
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_SHARED_LIBRARY=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        ${{matrix.static_hwloc}}

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} -j $(sysctl -n hw.logicalcpu)

    - name: Test UMF installation and uninstallation
      run: >
        python3 ${{github.workspace}}/test/test_installation.py
        --build-dir ${{env.BUILD_DIR}}
        --install-dir ${{env.INSTL_DIR}}
        --build-type ${{env.BUILD_TYPE}}
        --proxy
        --umf-version ${{env.UMF_VERSION}}
        --shared-library